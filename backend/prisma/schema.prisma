// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum TimeSlotStatus {
  AVAILABLE
  BOOKED
  UNAVAILABLE
}

enum Specialization {
  THERAPIST
  CARDIOLOGIST
  NEUROLOGIST
  PEDIATRICIAN
  SURGEON
  DENTIST
  OPHTHALMOLOGIST
  DERMATOLOGIST
  PSYCHIATRIST
  ENDOCRINOLOGIST
}

model User {
  id        String   @id @default(uuid()) // String with UUID
  firstName String
  lastName  String
  email     String   @unique
  inn       String   @unique
  phone     String
  password  String
  role      UserRole @default(PATIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctorProfile  Doctor? // One-to-one with Doctor
  patientProfile Patient? // One-to-one with Patient
  testResults    TestResult[]  @relation("PatientTestResults")
  appointments   Appointment[] // Patients can have appointments
}

model Doctor {
  id             String         @id @default(uuid()) // String with UUID
  userId         String         @unique // String FK
  specialization Specialization
  education      String
  experience     String
  description    String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())

  user         User          @relation(fields: [userId], references: [id])
  appointments Appointment[]
  timeSlots    TimeSlot[]
  testResults  TestResult[]

  @@map("doctors")
}

model Patient {
  id        String   @id @default(uuid()) // String with UUID
  userId    String   @unique // String FK
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user         User          @relation(fields: [userId], references: [id])
  appointments Appointment[]

  @@map("patients")
}

model TimeSlot {
  id        String         @id @default(uuid()) // String with UUID
  doctorId  String // String FK
  startTime DateTime
  endTime   DateTime
  status    TimeSlotStatus @default(AVAILABLE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())

  doctor      Doctor       @relation(fields: [doctorId], references: [id])
  appointment Appointment?

  @@index([doctorId])
  @@index([startTime])
  @@index([status])
  @@map("time_slots")
}

model Appointment {
  id         String            @id @default(uuid()) // String with UUID
  doctorId   String // String FK
  patientId  String // String FK
  timeSlotId String            @unique // String FK
  status     AppointmentStatus @default(SCHEDULED)
  notes      String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @default(now())

  doctor   Doctor   @relation(fields: [doctorId], references: [id])
  patient  Patient  @relation(fields: [patientId], references: [id])
  timeSlot TimeSlot @relation(fields: [timeSlotId], references: [id])
  User     User?    @relation(fields: [userId], references: [id])
  userId   String?

  @@index([doctorId])
  @@index([patientId])
  @@map("appointments")
}

model TestResult {
  id          String   @id @default(uuid()) // String with UUID
  patientId   String // String FK
  doctorId    String // String FK
  testName    String
  result      String
  description String?
  createdAt   DateTime @default(now())

  patient User   @relation("PatientTestResults", fields: [patientId], references: [id])
  doctor  Doctor @relation(fields: [doctorId], references: [id])

  @@index([patientId])
  @@index([doctorId])
  @@map("testResults")
}
